# 1、一行代码实现1—100之和
"""
print(sum(range(1, 101)))
"""
# 2、如何在一个函数内部修改全局变量
"""
使用global 修饰需求修改的变量   global test_xxx
"""
# 3、列出5个python标准库
"""
os：提供了不少与操作系统相关联的函数
sys:   通常用于命令行参数
re:   正则匹配
math: 数学运算
datetime:处理日期时间
"""
# 4、字典如何删除键和合并两个字典
"""
dict_a ={"a":1,"b":2,"c":"cccc"}
dict_b={"d":4,"e":5,"f":"你"}
print(dict_a["a"])
del dict_a["a"] #删除字典中的值
print(dict_a)
dict_a.update(dict_b) #合并字典
print(dict_a)
"""
# 5、谈下python的GIL
"""
GIL 是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），
使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。
所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。

多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大
"""
# 6、python实现列表去重的方法
"""
使用set集合去重，
goods = ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子","雪纺衫", "裤子", "高跟鞋", "袜子","雪纺衫", "裤子", "高跟鞋", "袜子""雪纺衫", "裤子", "高跟鞋", "袜子"]
list(set(goods))

字典去重
goods = ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子","雪纺衫", "裤子", "高跟鞋", "袜子","雪纺衫", "裤子", "高跟鞋", "袜子""雪纺衫", "裤子", "高跟鞋", "袜子"]
dict ={}.fromkeys(goods)
print(dict.keys())
"""
# 7、fun(*args,**kwargs)中的*args,**kwargs什么意思？
"""
*args 用来将参数打包成tuple给函数体调用
**kwargs 打包关键字参数成dict给函数体调用
注意点：参数arg、*args、**kwargs三个参数的位置必须是一定的。必须是(arg,*args,**kwargs)这个顺序，否则程序会报错。
"""
# 8、python2和python3的range（100）的区别
"""
python2返回列表，python3返回迭代器，节约内存
迭代器（iterator）：
迭代器是一个对象。
是一个可以记住遍历的位置的对象
迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。
迭代器只能往前不会后退。
创建迭代器：字符串，列表或元组对象都可用于创建迭代器
迭代器有两个基本的方法：iter() 和 next()

"""
# 9、一句话解释什么样的语言能够用装饰器?
"""
函数可以作为参数传递的语言，可以使用装饰器
Python装饰器看起来类似Java中的注解
装饰器本质上是一个Python函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。
它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。
装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。
概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。
"""
# 10、python内建数据类型有哪些
"""
整型--int
布尔型--bool
字符串--str
列表--list
元组--tuple
字典--dict
"""
# 11、简述面向对象中__new__和__init__区别
"""
__init__是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值。
__new__是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例，是个静态方法。
也就是，__new__在__init__之前被调用，__new__的返回值（实例）将传递给__init__方法的第一个参数，然后__init__给这个实例设置一些参数。
"""
# 12、简述with方法打开处理文件帮我我们做了什么？
#
# 13、列表[1,2,3,4,5],请使用map()函数输出[1,4,9,16,25]，并使用列表推导式提取出大于10的数，最终输出[16,25]
#
# 14、python中生成随机整数、随机小数、0—1之间小数方法
#
# 15、避免转义给字符串加哪个字母表示原始字符串？
#
# 16、<div class="nam">中国</div>，用正则匹配出标签里面的内容（“中国”），其中class的类名是不确定的
#
# 17、python中断言方法举例
#
# 18、数据表student有id,name,score,city字段，其中name中的名字可有重复，需要消除重复行,请写sql语句
#
# 19、10个Linux常用命令
#
# 20、python2和python3区别？列举5个
#
# 21、列出python中可变数据类型和不可变数据类型，并简述原理
#
# 22、s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”
#
# 23、用lambda函数实现两个数相乘
#
# 24、字典根据键从小到大排序dict={“name”:”zs”,”age”:18,”city”:”深圳”,”tel”:”1362626627”}
#
# 25、利用collections库的Counter方法统计字符串每个单词出现的次数”kjalfj;ldsjafl;hdsllfdhg;lahfbl;hl;ahlf;h”
#
# 26、字符串a = “not 404 found 张三 99 深圳”，每个词中间是空格，用正则过滤掉英文和数字，最终输出”张三  深圳”
#
# 27、filter方法求出列表所有奇数并构造新列表，a =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#
# 28、列表推导式求列表所有奇数并构造新列表，a =  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#
# 29、正则re.complie作用
#
# 30、a=（1，）b=(1)，c=(“1”) 分别是什么类型的数据？
#
# 31、两个列表[1,5,7,9]和[2,2,6,8]合并为[1,2,2,3,6,7,8,9]
#
# 32、用python删除文件和用linux命令删除文件方法
#
# 33、log日志中，我们需要用时间戳记录error,warning等的发生时间，请用datetime模块打印当前时间戳 “2018-04-01 11:38:54”
#
# 34、数据库优化查询方法
#
# 35、请列出你会的任意一种统计图（条形图、折线图等）绘制的开源库，第三方也行
#
# 36、写一段自定义异常代码
#
# 37、正则表达式匹配中，（.）和（.?）匹配区别？
#
# 38、简述Django的orm
#
# 39、[[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]
#
# 40、x=”abc”,y=”def”,z=[“d”,”e”,”f”],分别求出x.join(y)和x.join(z)返回的结果
#
# 41、举例说明异常模块中try except else finally的相关意义
#
# 42、python中交换两个数值
#
# 43、举例说明zip（）函数用法
#
# 44、a=”张明 98分”，用re.sub，将98替换为100
#
# 45、写5条常用sql语句
#
# 46、a=”hello”和b=”你好”编码成bytes类型
#
# 47、[1,2,3]+[4,5,6]的结果是多少？
#
# 48、提高python运行效率的方法
#
# 49、简述mysql和redis区别
#
# 50、遇到bug如何处理
#
# 51、1、正则匹配，匹配日期2018-03-20
# url=’https://sycm.taobao.com/bda/tradinganaly/overview/get_summary.json?dateRange=2018-03-20%7C2018-03-20&dateType=recent1&device=1&token=ff25b109b&_=1521595613462‘
#
# 52、list=[2,3,5,4,9,6]，从小到大排序，不许用sort，输出[2,3,4,5,6,9]
#
# 53、写一个单列模式
#
# 54、保留两位小数
# 题目本身只有a=”%.03f”%1.3335,让计算a的结果，为了扩充保留小数的思路，提供round方法（数值，保留位数）
#
# 55、求三个方法打印结果
#
# 56、列出常见的状态码和意义
#
# 57、分别从前端、后端、数据库阐述web项目的性能优化
#
# 58、使用pop和del删除字典中的”name”字段，dic={“name”:”zs”,”age”:18}
#
# 59、列出常见MYSQL数据存储引擎
#
# 60、计算代码运行结果，zip函数历史文章已经说了，得出[(“a”,1),(“b”,2)，(“c”,3),(“d”,4),(“e”,5)]
#
# 61、简述同源策略
#
# 62、简述cookie和session的区别
#
# 63、简述多线程、多进程
#
# 64、简述any()和all()方法
#
# 65、IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError分别代表什么异常
#
# 66、python中copy和deepcopy区别
#
# 67、列出几种魔法方法并简要介绍用途
#
# 68、C:\Users\ry-wu.junya\Desktop>python 1.py 22 33命令行启动程序并传参，print(sys.argv)会输出什么数据？
#
# 69、请将[i for i in range(3)]改成生成器
#
# 70、a = “  hehheh  “,去除收尾空格
#
# 71、举例sort和sorted对列表排序，list=[0,-1,3,-10,5,9]
#
# 72、对list排序foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4],使用lambda函数从小到大排序
#
# 73、使用lambda函数对list排序foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4]，输出结果为
# [0,2,4,8,8,9,-2,-4,-4,-5,-20]，正数从小到大，负数从大到小
#
# 74、列表嵌套字典的排序，分别根据年龄和姓名排序
#
# 75、列表嵌套元组，分别按字母和数字排序
#
# 76、列表嵌套列表排序，年龄数字相同怎么办？
#
# 77、根据键对字典排序（方法一，zip函数）
#
# 78、根据键对字典排序（方法二,不用zip)
#
# 79、列表推导式、字典推导式、生成器
#
# 80、最后出一道检验题目，根据字符串长度排序，看排序是否灵活运用
#
# 81、举例说明SQL注入和解决办法
#
# 82、s=”info:xiaoZhang 33 shandong”,用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]
#
# 83、正则匹配以163.com结尾的邮箱
#
# 84、递归求和
#
# 85、python字典和json字符串相互转化方法
#
# 86、MyISAM 与 InnoDB 区别：
#
# 87、统计字符串中某字符出现次数
#
# 88、字符串转化大小写
#
# 89、用两种方法去空格
#
# 90、正则匹配不是以4和7结尾的手机号
#
# 91、简述python引用计数机制
#
# 92、int(“1.4”),int(1.4)输出结果？
#
# 93、列举3条以上PEP8编码规范
#
# 94、正则表达式匹配第一个URL
#
# 95、正则匹配中文
#
# 96、简述乐观锁和悲观锁
#
# 97、r、r+、rb、rb+文件打开模式区别
#
# 98、Linux命令重定向 > 和 >>
#
# 99、正则表达式匹配出 <html><h1>www.itcast.cn</h1></html>
#
# 100、python传参数是传值还是传址？
#
#
# 101、求两个列表的交集、差集、并集
#
# 102、生成0-100的随机数
#
# 103、lambda匿名函数好处
#
# 104、常见的网络传输协议
#
# 105、单引号、双引号、三引号用法
#
# 106、python垃圾回收机制
#
# 107、HTTP请求中get和post区别
#
# 108、python中读取Excel文件的方法
#
# 109、简述多线程、多进程
#
# 110、python正则中search和match

#华为编程题：
# 写出一个程序，接受一个由字母和数字组成的字符串，和一个字符，然后输出输入字符串中含有该字符的个数。不区分大小写。
"""
str1 = input().lower()
str2 = input().lower()
print(str1.count(str2))
"""
# 明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），
# 对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。
# 然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。
# 请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据，希望大家能正确处理)。
"""
while True:
    try:
        a = int(input())
        res = set()
        for i in range(a):
            res.add(int(input()))
        for i in sorted(res):
            print(i)
    except:
        break
"""

# str1 = input()
# str2 = input()
#
#
# def string_out(str):
#     if len(str) <= 8:
#         print(str + "0" * (8 - len(str)))
#     else:
#         while len(str) > 8:
#             print(str[:8])
#             str = str[8:]
#         print(str + "0" * (8 - len(str)))
#
# string_out(str1)
# string_out(str2)

class Solution:
	def twoSum(self,nums,target):
		n = len(nums)
		for x in range(n):
			a = target - nums[x]
			if a in nums: # 判断a有没有在nums数组里
        		y = nums.index(a) # 有的话，那么用index获取到该数字的下标
				if x == y:
					continue # 同样的数字不能重复用，所以这里如果是一样的数字，那么就不满足条件，跳过
				else: # 否则就返回结果
					return x,y
					break
			else:
                continue # 上面的条件都不满足就跳过，进行下一次循环







